<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Песочница. github</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="robots" content="index, follow">
<meta name="description" content="Песочница с ссылочками" />
<?php include ("{$_SERVER['DOCUMENT_ROOT']}/template/inc/scripts.php"); ?>
</head>
<body>
<?php include ("{$_SERVER['DOCUMENT_ROOT']}/template/inc/header.php"); ?>
<div class="contet">
<h1>Заметки о командной строке</h1>
<h2>Полезно почитать, источники</h2>
<ul>
<li><a href="https://git-scm.com/" target="_blank">Git</a>. Первоисточник по гиту: качаем программу, читаем мануалы
	<ul>
		<li><a href="https://git-scm.com/book/uk/v2" target="_blank">Как работать с Git'ом</a></li>
	</ul>
</li>
<li><a href="https://htmlacademy.ru/blog/86-useful-commands-for-working-with-git" target="_blank">Полезные команды для работы с Git</a></li>
<li><a href="https://proglib.io/p/git-cheatsheet/" target="_blank">Шпаргалка по Git, в которой представлены основные команды</a></li>
<li><a href="http://dev-lab.info/2013/08/шпаргалка-по-git-основные-команды-слиян/" target="_blank">Шпаргалка по Git — основные команды, слияние веток, выписка веток с github</a></li>
<li><a href="https://lifehacker.ru/komandy-linux/" target="_blank">71 команда Linux на все случаи жизни. Ну почти </a></li>
</ul>

<h2>Основные команды git</h2>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Шпаргалка по основным командам</span></a>
<div class="spoiler-block">
<p class="like_b">git add</p>
<p>Команда git add добавляет содержимое рабочей директории в индекс (staging area) для последующего коммита. По умолчанию git commit использует лишь этот индекс, так что вы можете использовать git add для сборки слепка вашего следующего коммита.</p>
<p class="like_b">git status</p>
<p>Команда git status показывает состояния файлов в рабочей директории и индексе: какие файлы изменены, но не добавлены в индекс; какие ожидают коммита в индексе. Вдобавок к этому выводятся подсказки о том, как изменить состояние файлов.</p>
<p class="like_b">git diff</p>
<p>Команда git diff используется для вычисления разницы между любыми двумя Git деревьями. Это может быть разница между вашей рабочей директорией и индексом (собственно git diff), разница между индексом и последним коммитом (git diff --staged), или между любыми двумя коммитами (git diff master branchB).</p>
<p class="like_b">git difftool</p>
<p>Команда git difftool просто запускает внешнюю утилиту сравнения для показа различий в двух деревьях, на случай если вы хотите использовать что-либо отличное от встроенного просмотрщика git diff.</p>
<p class="like_b">git commit</p>
<p>Команда git commit берёт все данные, добавленные в индекс с помощью git add, и сохраняет их слепок во внутренней базе данных, а затем сдвигает указатель текущей ветки на этот слепок.</p>
<p class="like_b">git reset</p>
<p>Команда git reset, как можно догадаться из названия, используется в основном для отмены изменений. Она изменяет указатель HEAD и, опционально, состояние индекса. Также эта команда может изменить файлы в рабочей директории при использовании параметра --hard, что может привести к потере наработок при неправильном использовании, так что убедитесь в серьёзности своих намерений прежде чем использовать его.</p>
<p class="like_b">git rm</p>
<p>Команда git rm используется в Git для удаления файлов из индекса и рабочей директории. Она похожа на git add с тем лишь исключением, что она удаляет, а не добавляет файлы для следующего коммита.</p>
<p class="like_b">git mv</p>
<p>Команда git mv — это всего лишь удобный способ переместить файл, а затем выполнить git addдля нового файла и git rm для старого.</p>
<p class="like_b">git clean</p>
<p>Команда git clean используется для удаления мусора из рабочей директории. Это могут быть результаты сборки проекта или файлы конфликтов слияний.</p>
</div>
</div>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Шпаргалка по ветвлению и слиянию</span></a>
<div class="spoiler-block">
<p class="like_b">git branch</p>
<p>Команда git branch — это своего рода “менеджер веток”. Она умеет перечислять ваши ветки, создавать новые, удалять и переименовывать их.</p>
<p class="like_b">git checkout</p>
<p>Команда git checkout используется для переключения веток и выгрузки их содержимого в рабочую директорию.</p>
<p class="like_b">git merge</p>
<p>Команда git merge используется для слияния одной или нескольких веток в текущую. Затем она устанавливает указатель текущей ветки на результирующий коммит.</p>
<p class="like_b">git mergetool</p>
<p>Команда git mergetool просто вызывает внешнюю программу слияний, в случае если у вас возникли проблемы слияния.</p>
<p class="like_b">git log</p>
<p>Команда git log используется для просмотра истории коммитов, начиная с самого свежего и уходя к истокам проекта. По умолчанию, она показывает лишь историю текущей ветки, но может быть настроена на вывод истории других, даже нескольких сразу, веток. Также её можно использовать для просмотра различий между ветками на уровне коммитов.</p>
<p class="like_b">git stash</p>
<p>Команда git stash используется для временного сохранения всех незакоммиченных изменений для очистки рабочей директории без необходимости коммитить незавершённую работу в новую ветку.</p>
<p class="like_b">git tag</p>
<p>Команда git tag используется для задания постоянной метки на какой-либо момент в истории проекта. Обычно она используется для релизов.</p>
</div>
</div>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Шпаргалка по совместной работе и обновлению проектов</span></a>
<div class="spoiler-block">
<p>Не так уж много команд в Git требуют сетевого подключения для своей работы, практически все команды оперируют с локальной копией проекта. Когда вы готовы поделиться своими наработками, всего несколько команд помогут вам работать с удалёнными репозиториями.</p>
<p class="like_b">git fetch</p>
<p>Команда git fetch связывается с удалённым репозиторием и забирает из него все изменения, которых у вас пока нет и сохраняет их локально.</p>
<p class="like_b">git pull</p>
<p>Команда git pull работает как комбинация команд git fetch и git merge, т.е. Git вначале забирает изменения из указанного удалённого репозитория, а затем пытается слить их с текущей веткой.</p>
<p class="like_b">git push</p>
<p>Команда git push используется для установления связи с удалённым репозиторием, вычисления локальных изменений отсутствующих в нём, и собственно их передачи в вышеупомянутый репозиторий. Этой команде нужно право на запись в репозиторий, поэтому она использует аутентификацию.</p>
<p class="like_b">git remote</p>
<p>Команда git remote служит для управления списком удалённых репозиториев. Она позволяет сохранять длинные URL репозиториев в виде понятных коротких строк, например «origin», так что вам не придётся забивать голову всякой ерундой и набирать её каждый раз для связи с сервером. Вы можете использовать несколько удалённых репозиториев для работы и git remote поможет добавлять, изменять и удалять их.</p>
<p class="like_b">git archive</p>
<p>Команда git archive используется для упаковки в архив указанных коммитов или всего репозитория.</p>
<p class="like_b">git submodule</p>
<p>Команда git submodule используется для управления вложенными репозиториями. Например, это могут быть библиотеки или другие, используемые не только в этом проекте ресурсы. У команды submodule есть несколько под-команд — add, update, sync и др. — для управления такими репозиториями.</p>
</div>
</div>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Шпаргалка по осмотру и сравнению</span></a>
<div class="spoiler-block">
<p class="like_b">git show</p>
<p>Команда git show отображает объект в простом и человекопонятном виде. Обычно она используется для просмотра информации о метке или коммите.</p>
<p class="like_b">git shortlog</p>
<p>Команда git shortlog служит для подведения итогов команды git log. Она принимает практически те же параметры, что и git log, но вместо простого листинга всех коммитов, они будут сгруппированы по автору.</p>
<p class="like_b">git describe</p>
<p>Команда git describe принимает на вход что угодно, что можно трактовать как коммит (ветку, тег) и выводит более-менее человекочитаемую строку, которая не изменится в будущем для данного коммита. Это может быть использовано как более удобная, но по-прежнему уникальная, замена SHA-1.</p>
</div>
</div>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Шпаргалка по отладке</span></a>
<div class="spoiler-block">
<p>В Git есть несколько команд, используемых для нахождения проблем в коде. Это команды для поиска места в истории, где проблема впервые проявилась и собственно виновника этой проблемы.</p>
<p class="like_b">git bisect</p>
<p>Команда git bisect — это чрезвычайно полезная утилита для поиска коммита в котором впервые проявился баг или проблема с помощью автоматического бинарного поиска.</p>
<p class="like_b">git blame</p>
<p>Команда git blame выводит перед каждой строкой файла SHA-1 коммита, последний раз менявшего эту строку и автора этого коммита. Это помогает в поисках человека, которому нужно задавать вопросы о проблемном куске кода.</p>
<p class="like_b">git grep</p>
<p>Команда git grep используется для поиска любой строки или регулярного выражения в любом из файлов вашего проекта, даже в более ранних его версиях.</p>
</div>
</div>

<h2>Команды для работы с linux</h2>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Команды Linux для навигации в терминале</span></a>
<div class="spoiler-block">
<p class="like_b">&&</p>
<p>Строго говоря, это не команда. Если вы хотите выполнить сразу несколько команд, поставьте между ними двойной амперсанд вот так: первая_команда && вторая_команда. Терминал выполнит команды по порядку. Вы можете ввести столько команд, сколько захотите.</p>
<p class="like_b">alias</p>
<p>Присваивает созданные вами названия длинным командам, которые вы не можете запомнить. Введите alias длинная_команда короткая_команда.</p>
<p class="like_b">cd</p>
<p>Изменяет текущую терминальную папку. Когда вы запускаете терминал, он использует вашу домашнюю папку. Введите cd адрес_папки, и терминал будет работать с файлами, которые там находятся.</p>
<p class="like_b">clear</p>
<p>Очищает окно терминала от всех сообщений.</p>
<p class="like_b">history</p>
<p>Отображает все недавно введённые вами команды. Кроме того, вы можете переключаться между недавними командами с помощью клавиш «Вверх» и «Вниз». Если вы не хотите, чтобы введённая вами команда была записана, поставьте перед ней пробел так: ваша_команда.</p>
<p class="like_b">man</p>
<p>Отображает руководство по программам и командам Linux. Введите man имя_пакетаили man ваша_команда.</p>
<p class="like_b">whatis</p>
<p>Отображает краткое описание какой-либо программы. Введите команду и название программы whatis имя_пакета.</p>
</div>
</div>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Команды Linux для получения прав суперпользователя</span></a>
<div class="spoiler-block">
<p>Для выполнения множества действий в системе, например для установки и удаления программ, вам понадобятся права администратора, или суперпользователя root, как его называют в Linux.</p>
    <p class="like_b">sudo</p>
	<p>Эта команда даст вам права суперпользователя. Введите sudo перед нужной командой (например,sudo apt upgrade), чтобы выполнить её от имени администратора. Система спросит у вас пароль.</p>
    <p class="like_b">sudo su</p>
	<p>После этой команды все введённые вами команды будут исполняться от имени суперпользователя, пока вы не закроете терминал. Используйте её, если вам нужно выполнить много команд с правами администратора.</p>
    <p class="like_b">sudo gksudo</p>
	<p>Команда для запуска с правами администратора приложения с графическим интерфейсом. Например, если вы хотите переместить или изменить системные файлы, введите sudo gksudo nautilus (укажите тот файловый менеджер, которым пользуетесь).</p>
    <p class="like_b">sudo !!</p>
	<p>Эта команда запустит ранее введённую команду с правами администратора. Полезно, если вы набрали команду без sudo.</p>
<p class="red_line">Не выполняйте от имени суперпользователя команд, которых не понимаете.</p>
</div>
</div>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Команды Linux для управления пакетным менеджером</span></a>
<div class="spoiler-block">
<p>Установку и удаление приложений в Linux выполняют пакетные менеджеры. В Ubuntu и Debian пакетный менеджер называется apt, в Fedora — dnf, в Arch и Manjaro — pacman. Они загружают приложения из сетевых репозитариев, источников пакетов. Давать им команды следует с правами суперпользователя.</p>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>apt (Debian/Ubuntu/Mint)</span></a>
<div class="spoiler-block">
    <p><span class="like_b">sudo apt install имя_пакета</span>. Установить нужный пакет.</p>
    <p><span class="like_b">sudo apt-add-repository адрес_репозитария</span>. Добавить сторонний репозитарий.</p>
    <p><span class="like_b">sudo apt update</span>. Обновить сведения о пакетах.</p>
    <p><span class="like_b">sudo apt upgrade</span> . Обновить все пакеты до самых свежих (выполнять после apt update).</p>
    <p><span class="like_b">sudo apt remove имя_пакета</span> . Удалить ненужный пакет.</p>
    <p><span class="like_b">sudo apt purge имя_пакета</span> . Удалить ненужный пакет со всеми зависимостями, если хотите освободить больше места.</p>
    <p><span class="like_b">sudo apt autoremove</span> . Удалить все ненужные зависимости, бесхозные пакеты и прочий мусор.</p>
</div>
</div>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>dnf (Red Hat/Fedora/CentOS)</span></a>
<div class="spoiler-block">
    <p><span class="like_b">sudo dnf install имя_пакета</span>. Установить нужный пакет.</p>
    <p><span class="like_b">sudo dnf config-manager --add-repo адрес_репозитария</span>. Добавить сторонний репозитарий.</p>
    <p><span class="like_b">sudo dnf upgrade</span>. Обновить все пакеты до самых свежих.</p>
    <p><span class="like_b">sudo dnf remove имя_пакета</span>. Удалить ненужный пакет.</p>
    <p><span class="like_b">sudo dnf autoremove</span>. Удалить все ненужные зависимости.</p>
</div>
</div>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>pacman (Arch/Manjaro)</span></a>
<div class="spoiler-block">
    <p><span class="like_b">sudo pacman -S имя_пакета</span>. Установить нужный пакет.</p>
    <p><span class="like_b">sudo yaourt -S имя_пакета</span>. Установить пакет из AUR, если его нет в основном репозитарии.</p>
    <p><span class="like_b">sudo pacman -Sy</span>. Обновить сведения о пакетах.</p>
    <p><span class="like_b">sudo pacman -Syu</span>. Обновить все пакеты до самых свежих.</p>
    <p><span class="like_b">sudo pacman -R имя_пакета</span>. Удалить ненужный пакет.</p>
    <p><span class="like_b">sudo pacman -Rs имя_пакета</span>. Удалить ненужный пакет со всеми зависимостями.</p>
</div>
</div>
<p>Вы можете устанавливать и удалять сразу несколько пакетов, просто перечисляя их через пробел.</p>
<p class="like_b">sudo apt install firefox clementine vlc</p>
<p>Если вы хотите установить какой-то пакет, но не знаете его точного названия, введите несколько первых букв имени пакета и дважды нажмите Tab. Пакетный менеджер покажет все пакеты, названия которых начинаются одинаково.</p>
</div>
</div>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Команды Linux для управления процессами</span></a>
<div class="spoiler-block">
    <p><span class="like_b">kill</span>. Эта команда служит для принудительного завершения процессов. Нужно ввести kill PID_процесса. PID процесса можно узнать, введя top.</p>
    <p><span class="like_b">xkill</span>. Ещё одна команда для завершения процессов. Введите её, затем щёлкните по тому окну, которое нужно закрыть.</p>
    <p><span class="like_b">killall</span>. Убивает процессы c определённым именем. К примеру, killall firefox.</p>
    <p><span class="like_b">top</span>. Отображает перечень запущенных процессов, сортируя в зависимости от потребления ресурсов CPU. Своего рода терминальный «Системный монитор».</p>
</div>
</div>

<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Команды Linux для управления файлами</span></a>
<div class="spoiler-block">
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Просмотр и изменение файлов</span></a>
<div class="spoiler-block">
    <p><span class="like_b">cat</span>. Когда команда используется с одним текстовым файлом (вот так: cat путь_к_файлу), она отображает его содержимое в окне терминала. Если указать два и больше файлов, cat путь_к_файлу_1 путь_к_файлу_2, она склеит их. Если ввести cat путь_к_файлу_1 > новый_файл, она объединит содержимое указанных файлов в новый файл.</p>
    <p><span class="like_b">chmod</span>. Позволяет изменять права доступа к файлу. Может пригодиться, если вы хотите внести изменения в системный файл.</p>
    <p><span class="like_b">chown</span>. Изменяет владельца файла. Следует выполнять с правами суперпользователя.</p>
    <p><span class="like_b">file</span>. Выводит информацию об указанном файле.</p>
    <p><span class="like_b">nano</span>. Открывает простой текстовый редактор. Можно создать новый текстовый файл или открыть существующий: nano путь_к_файлу.</p>
    <p><span class="like_b">rename</span>. Переименовывает файл или несколько файлов. Команду можно использовать и для массового переименования файлов по маске.</p>
    <p><span class="like_b">touch</span>. Изменяет дату последнего открытия или модификации указанного файла.</p>
    <p><span class="like_b">wget</span>. Загружает файлы из интернета в терминальную папку.</p>
    <p><span class="like_b">zip</span>. Распаковывает и сжимает архивы.</p>
</div>
</div>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Создание и удаление файлов и папок</span></a>
<div class="spoiler-block">
    <p><span class="like_b">mkdir</span>. Создаёт новую папку в текущей терминальной папке или в указанной папке: mkdir путь_к_папке.</p>
    <p><span class="like_b">rmdir</span>. Удаляет указанную папку.</p>
    <p><span class="like_b">rm</span>. Удаляет файлы. Может удалить как отдельный файл, так и группу, соответствующую определённым признакам.</p>
</div>
</div>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Копирование и перемещение файлов</span></a>
<div class="spoiler-block">
    <p><span class="like_b">cp</span>. Создаёт копию указанного файла в папке терминала: cp путь_к_файлу. Или вы можете указать назначение cp путь_к_файлу путь_для_копии.</p>
    <p><span class="like_b">mv</span>. Перемещает файл из одной папки в другую. Вы можете указать имя для перемещаемого файла. Забавно, но в Linux эта команда может использоваться и для переименования файлов. Просто укажите ту же папку, где находится файл, и другое имя.</p>
</div>
</div>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Поиск файлов</span></a>
<div class="spoiler-block">
    <p><span class="like_b">find</span>. Поиск файлов по определённым критериям, таким как имя, тип, размер, владелец, дата создания и модификации.</p>
    <p><span class="like_b">grep</span>. Поиск текстовых файлов, содержащих определённые строки. Критерии очень гибко настраиваются.</p>
    <p><span class="like_b">locate</span>. Поиск файлов и папок, чьи названия подходят запросу, и отображение их путей в файловой системе.</p>
</div>
</div>
<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Команды Linux для работы с разделами</span></a>
<div class="spoiler-block">
    <p><span class="like_b">lsblk</span>. Эта команда демонстрирует, какие диски есть в вашей системе и на какие разделы они поделены. Также команда отображает имена ваших разделов и накопителей, в формате sda1, sda2 и так далее.</p>
    <p><span class="like_b">mount</span>. Монтирует накопители, устройства или файловые системы Linux, чтобы вы могли с ними работать. Обычно устройства подключаются автоматически, как только вы щёлкнете по ним в файловом менеджере. Но иногда может понадобиться примонтировать что-то вручную. Вы можете подключать что угодно: диски, внешние накопители, разделы и даже ISO-образы. Эту команду нужно выполнять с правами суперпользователя. Чтобы примонтировать имеющийся диск или раздел, введите mount sdX.</p>
    <p><span class="like_b">umount</span>. Демонтирует файловые системы. Команда umount sdX отключит файловую систему внешнего носителя, чтобы вы могли извлечь его.</p>
    <p><span class="like_b">dd</span>. Эта команда копирует и преобразовывает файлы и разделы. У неё множество различных применений. Например, dd if=/dev/sda of=/dev/sdb сделает точную копию раздела sda на разделе sdb. dd if=/dev/zero of=/dev/sdX затрёт содержимое указанного носителя нулями, чтобы информацию было невозможно восстановить. А dd if=~/Downloads/ubuntu.iso of=/dev/sdX bs=4M сделает загрузочный носитель из скачанного вами образа с дистрибутивом.</p>
</div>
</div>
</div>
</div>

<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Команды Linux для управления системой</span></a>
<div class="spoiler-block">
    <p><span class="like_b">df</span>. Отображает объём вашего диска, и сколько на нём осталось свободного места.</p>
    <p><span class="like_b">free</span>. Отображает объём доступной и занятой оперативной памяти.</p>
    <p><span class="like_b">uname</span>. Отображает сведения о системе Если ввести uname, терминал сообщит только Linux. Но команда uname -a выводит сведения об имени компьютера и версии ядра.</p>
    <p><span class="like_b">uptime</span>. Сообщает, как долго запущена ваша система.</p>
    <p><span class="like_b">whereis</span>. Отображает расположение исполняемого файла нужной программы.</p>
    <p><span class="like_b">whoami</span>. Называет имя пользователя.</p>
</div>
</div>

<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Команды Linux для управления пользователями</span></a>
<div class="spoiler-block">
    <p><span class="like_b">useradd</span>. Регистрирует нового пользователя. Введите useradd имя_пользователя, и пользователь будет создан.</p>
    <p><span class="like_b">userdel</span>. Удаляет учётную запись и файлы пользователя.</p>
    <p><span class="like_b">usermod</span>. Изменяет учётную запись пользователя. Может переместить домашнюю папку пользователя или назначить дату, когда учётная запись будет заблокирована.</p>
    <p><span class="like_b">passwd</span>. Изменяет пароли учётных записей. Обычный пользователь может изменить пароль только своей учётной записи, суперпользователь может изменить пароль любой учётной записи.</p>
</div>
</div>

<div class="spoiler_v2">
<a href="#" class="spoiler-trigger"><span>Команды Linux для управления сетью</span></a>
<div class="spoiler-block">
    <p><span class="like_b">ip</span>. Многофункциональная команда для работы с сетью. Команда ip address show выводит сведения о сетевых адресах, ip route управляет маршрутизацией и так далее. Давая команды ip link set ethX up, ip link set ethX down, можно включать и выключать соединения. У команды ip много применений, так что перед её использованием лучше ознакомиться с руководством или ввести ip --help</p>
    <p><span class="like_b">ping</span>. Показывает, подключены ли вы к сети, и помогает определить качество связи.</p>
</div>
</div>
</div>
<?php include ("{$_SERVER['DOCUMENT_ROOT']}/template/inc/footer.php"); ?>
</body>
</html>